{"/home/travis/build/npmtest/node-npmtest-compoxure/test.js":"/* istanbul instrument in package npmtest_compoxure */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-compoxure/lib.npmtest_compoxure.js":"/* istanbul instrument in package npmtest_compoxure */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_compoxure = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_compoxure = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-compoxure/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-compoxure && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_compoxure */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_compoxure\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_compoxure.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_compoxure.rollup.js'] =\n            local.assetsDict['/assets.npmtest_compoxure.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_compoxure.__dirname + '/lib.npmtest_compoxure.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-compoxure/node_modules/compoxure/index.js":"var cookieParser = require('cookie-parser');\nvar bodyParser = require('body-parser');\nvar ware = require('ware');\n\nmodule.exports = function(config, eventHandler, optionsTransformer) {\n\n  eventHandler = eventHandler || {};\n  eventHandler.logger = eventHandler.logger || function() {};\n  eventHandler.stats = eventHandler.stats || function() {};\n\n  optionsTransformer = optionsTransformer || function(req, options, next) { next(null, options); };\n\n  var backendProxyMiddleware = require('./src/middleware/proxy')(config, eventHandler, optionsTransformer);\n  var cacheMiddleware = require('reliable-get/CacheMiddleware')(config);\n  var selectBackend = require('./src/middleware/backend')(config);\n  var rejectUnsupportedMediaType = require('./src/middleware/mediatypes');\n  var passThrough = require('./src/middleware/passthrough')(config);\n  var interrogateRequest = require('./src/middleware/interrorgator')(config, eventHandler);\n  var cleanInvalidUri = require('./src/middleware/invalidurl')(eventHandler);\n  var dropFavIcon = require('./src/middleware/favicon');\n\n  var middleware = ware()\n                    .use(cleanInvalidUri)\n                    .use(dropFavIcon)\n                    .use(cacheMiddleware)\n                    .use(interrogateRequest)\n                    .use(selectBackend)\n                    .use(rejectUnsupportedMediaType)\n                    .use(passThrough)\n                    .use(cookieParser)\n                    .use(bodyParser.text({type: 'text/compoxure'}))\n                    .use(backendProxyMiddleware);\n\n  return function(req, res) {\n    middleware.run(req, res, function(err) {\n        if(err) {\n            // Just end fast - headers sent above if needed.\n            res.end('');\n        }\n    });\n  }\n\n};\n","/home/travis/build/npmtest/node-npmtest-compoxure/node_modules/compoxure/src/debug-script.js":"/*jslint browser: true, boss:true */\n(function (w, d) {\n\n  var elBetweenDelimiters = function (first, last) {\n    var els = [];\n    var el = first;\n\n    while (el = el.nextSibling) {\n      if (el === last) {\n        return els;\n      }\n      els.push(el);\n    }\n  };\n\n  var markNodes = function (openTag) {\n    var data = JSON.parse(openTag.innerHTML);\n    var id = openTag.getAttribute('data-cx-open-id');\n    var closeTag = d.querySelector('script[data-cx-close-id=\"' + id + '\"]');\n    var nodes = elBetweenDelimiters(openTag, closeTag);\n    console.log('cx fragment', data, nodes);\n    nodes.forEach(function (el) {\n      el.cxDebugId = id;\n      el.cxDebugData = data;\n      el.cxDebugNodes = nodes;\n    });\n  };\n\n  var openTags = d.querySelectorAll('script[type=\"cx-debug-open\"]');\n  Array.prototype.forEach.call(openTags, markNodes);\n\n}(window, document));","/home/travis/build/npmtest/node-npmtest-compoxure/node_modules/compoxure/src/extract-slots.js":"var htmlparser = require('htmlparser2');\nvar Core = require('parxer/lib/core');\nvar voidElements = require('parxer/lib/void');\nvar attr = require('parxer/lib/attr');\n\nfunction extractSlots(content, callback) {\n    var currentSlot;\n    var depth;\n    var selfClosing;\n    var slots = {};\n\n    var config = {};\n    // Defaults\n    config.prefix = config.prefix || 'cx-';\n    config.rawSuffix = config.rawSuffix || '-raw';\n\n    var parser = new htmlparser.Parser({\n        onopentag: function(tagname, attribs) {\n            var useSlot = attr.getAttr(config.prefix + 'use-slot', attribs);\n            if (useSlot){\n                currentSlot = attribs[useSlot];\n                depth = 1;\n                slots[currentSlot] = slots[currentSlot] || '';\n            } else if (currentSlot) {\n                if(voidElements[tagname]) {\n                    selfClosing = true;\n                } else {\n                    selfClosing = false;\n                }\n                depth++;\n                slots[currentSlot] += Core.createTag(tagname, attribs, selfClosing);\n            }\n        },\n        onprocessinginstruction: function(name, data) {\n            if (currentSlot) {\n                slots[currentSlot] += '<' + data + '>';\n            }\n        },\n        ontext:function(data) {\n            if (currentSlot) {\n                slots[currentSlot] += data;\n            }\n        },\n        oncomment: function(data) {\n            if (currentSlot) {\n                slots[currentSlot] += '<!--' + data;\n            }\n        },\n        oncommentend: function() {\n            if (currentSlot) {\n                slots[currentSlot] += '-->';\n            }\n        },\n        onclosetag: function(tagname) {\n            if (currentSlot) {\n                depth--;\n                if (depth === 0) {\n                    currentSlot = undefined;\n                    return;\n                }\n                if (!selfClosing) {\n                    slots[currentSlot] += '</' + tagname + '>';\n                } else {\n                    selfClosing = false;\n                }\n            }\n        },\n        onend: function() {\n            callback(null, slots);\n        },\n        recognizeSelfClosing: true\n    });\n    parser.end(content);\n}\n\nmodule.exports = extractSlots;\n","/home/travis/build/npmtest/node-npmtest-compoxure/node_modules/compoxure/src/utils.js":"'use strict';\n\nvar _ = require('lodash');\n\nfunction timeToMillis(timeString) {\n\n  var matched = new RegExp('(\\\\d+)(.*)').exec(timeString),\n    num = matched[1],\n    period = matched[2] || 'ms',\n    value = 0;\n\n  switch (period) {\n  case 's':\n    value = parseInt(num) * 1000;\n    break;\n  case 'm':\n    value = parseInt(num) * 1000 * 60;\n    break;\n  case 'h':\n    value = parseInt(num) * 1000 * 60 * 60;\n    break;\n  case 'd':\n    value = parseInt(num) * 1000 * 60 * 60 * 24;\n    break;\n  default:\n    value = parseInt(num);\n  }\n\n  return value;\n\n}\n\nfunction cacheKeytoStatsd(key) {\n  key = key.replace(/\\./g, '_');\n  key = key.replace(/-/g, '_');\n  key = key.replace(/:/g, '_');\n  key = key.replace(/\\//g, '_');\n  return key;\n}\n\nfunction urlToCacheKey(url) {\n  url = url.replace('http://', '');\n  url = cacheKeytoStatsd(url);\n  return url;\n}\n\nfunction formatTemplateVariables(variables) {\n  return _.reduce(variables, function (result, variable, cxKey) {\n    if (cxKey.indexOf('x-') === -1) {\n      return result;\n    }\n\n    var strippedKey = cxKey.replace('x-', '');\n    var variableKey = strippedKey.split('|')[0];\n    var variableName = strippedKey.replace(variableKey + '|', '');\n\n    result[variableKey + ':' + variableName] = variable;\n    result[variableKey + ':' + variableName + ':encoded'] = encodeURI(variable);\n\n    return result;\n  }, {});\n}\n\nfunction filterCookies(whitelist, cookies) {\n  return _.reduce(cookies, function (result, value, key) {\n    if (whitelist.length === 0 || _.contains(whitelist, key)) {\n      result += result ? '; ' : '';\n      result += key + '=' + value;\n    }\n    return result;\n  }, '');\n}\n\nfunction getBackendConfig(config, url, req) {\n  return _.find(config.backend, function (server) {\n    // Then try to match based on pattern in backend Config\n    if (server.pattern) {\n      return [].concat(server.pattern).some(function (pattern) {\n        return new RegExp(pattern).test(url);\n      });\n    }\n    // Finally try to match based on lookup function in backend Config\n    if (req && server.fn) { // for layout config I am not passing req !\n      if (typeof config.functions[server.fn] == 'function') {\n        return config.functions[server.fn](req, req.templateVars, server);\n      }\n    }\n  });\n}\n\nmodule.exports = {\n  timeToMillis: timeToMillis,\n  urlToCacheKey: urlToCacheKey,\n  cacheKeytoStatsd: cacheKeytoStatsd,\n  render: require('parxer').render,\n  formatTemplateVariables: formatTemplateVariables,\n  filterCookies: filterCookies,\n  getBackendConfig: getBackendConfig,\n};\n","/home/travis/build/npmtest/node-npmtest-compoxure/node_modules/compoxure/src/middleware/backend.js":"var HttpStatus = require('http-status-codes');\nvar _ = require('lodash');\nvar utils = require('../utils');\n\nmodule.exports = function (config) {\n\n  var backendDefaults = _.defaults(config.backendDefaults || {}, {\n    quietFailure: false,\n    replaceOuter: false,\n    dontPassUrl: true,\n    leaveContentOnFail: true,\n    ttl: '5m',\n    noCache: false,\n    timeout: '2s',\n    addResponseHeaders: {},\n    headers: [],\n    passThroughHeaders: []\n  });\n\n  return function selectBackend(req, res, next) {\n\n    var headerBackend = {\n      name: req.get && req.get('x-compoxure-backend'),\n      target: req.get && req.get('x-compoxure-backend-target'),\n      ttl: req.get && req.get('x-compoxure-backend-ttl'),\n      noCache: req.get && req.get('x-compoxure-backend-nocache'),\n      timeout: req.get && req.get('x-compoxure-backend-timeout')\n    };\n\n    if (config.backend) {\n      // First try to match based on header and use header values\n      if (headerBackend.target) {\n        req.backend = _.find(config.backend, function (server) {\n          if(headerBackend.name && server.name === headerBackend.name) {\n            return true;\n          }\n        });\n      } else {\n        req.backend = utils.getBackendConfig(config, req.url, req);\n      }\n    }\n\n    // If we haven't matched but have headers, lets just use these\n    if (!req.backend && headerBackend.target) {\n      req.backend = headerBackend;\n    }\n\n    if (!req.backend) {\n      if (!res.headersSent) {\n        res.writeHead(HttpStatus.NOT_FOUND);\n      }\n      return next({\n        level: 'warn',\n        message: 'Backend not found'\n      });\n    } else {\n      req.backend = _.defaults(_.clone(req.backend), headerBackend, backendDefaults);\n      req.backend.target = utils.render(req.backend.target, req.templateVars);\n      req.backend.cacheKey = req.backend.cacheKey ? utils.render(req.backend.cacheKey, req.templateVars) : null;\n      return next();\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-compoxure/node_modules/compoxure/src/middleware/favicon.js":"module.exports = function (req, res, next) {\n  if (req.url === '/favicon.ico') {\n    if (!res.headersSent) {\n      res.writeHead(200, {\n        'Content-Type': 'image/x-icon'\n      });\n    }\n    return next({\n      level: 'info',\n      message: 'Dropped favicon request'\n    });\n  }\n  next();\n}\n","/home/travis/build/npmtest/node-npmtest-compoxure/node_modules/compoxure/src/middleware/htmlparser.js":"var fs = require('fs');\nvar path = require('path');\nvar url = require('url');\nvar parxer = require('parxer').parxer;\nvar parxerPlugins = require('parxer/Plugins');\nvar _ = require('lodash');\nvar utils = require('../utils');\nvar htmlEntities = new (require('html-entities').AllHtmlEntities)();\n\nvar errorTemplate = _.template('<div style=\"color: red; font-weight: bold; font-family: monospace;\">Error: <%= err %></div>');\nvar debugScriptTag = _.template('<script type=\"cx-debug-<%- type %>\" data-cx-<%- type %>-id=\"<%- id %>\"><%= data && JSON.stringify(data) %></script>');\nvar debugScript = '<script>' + fs.readFileSync(path.join(__dirname, '../debug-script.js'), 'utf8') + '</script>';\n\nfunction hasCxAttr(node, name) {\n  return name in node.attribs || ('data-' + name in node.attribs);\n}\n\nfunction getCxAttr(node, name, defaultAttr) {\n  var value = node.attribs[name] || node.attribs['data-' + name];\n\n  if (value) {\n    return htmlEntities.decode(value);\n  }\n\n  return defaultAttr === undefined ? false : defaultAttr;\n}\n\nfunction getNoCacheAttr(fragment) {\n  /* jslint evil: true */\n  var explicitNoCacheAttr = getCxAttr(fragment, 'cx-no-cache');\n  return explicitNoCacheAttr ? eval(explicitNoCacheAttr) : false;\n}\n\nfunction delimitContent(response, options) {\n  var id = _.uniqueId();\n  var openTag = debugScriptTag({ data: { options: options, status: response.statusCode, timing: response.timing }, id: id, type: 'open' });\n  var closeTag = debugScriptTag({ data: null, id: id, type: 'close' });\n  return openTag + response.content + closeTag;\n}\n\nfunction getMiddleware(config, reliableGet, eventHandler, optionsTransformer) {\n  function getCdnHost() {\n    if (config.cdn.host) {\n      return config.cdn.host;\n    }\n  }\n\n  function getCdnUrl() {\n    if (config.cdn.url) {\n      return config.cdn.url;\n    }\n  }\n\n  return function parserMiddleware(req, res, cb) {\n    var templateVars = req.templateVars;\n    var commonState = {}; // common between all parser\n    var fragmentTimings = [];\n\n    function getContent(fragment, next) {\n      if (!(config.content && config.content.server)) {\n        return next(null);\n      }\n\n      var tag = getCxAttr(fragment, 'cx-content');\n      var url = config.content.server + '/' + tag;\n      var cacheKeyAttr = getCxAttr(fragment, 'cx-cache-key');\n\n      var opts = {\n        url: url,\n        timeout: config.content.timeout || 5000,\n        cacheKey: cacheKeyAttr,\n        cacheTTL: utils.timeToMillis(getCxAttr(fragment, 'cx-cache-ttl', '1m'))\n      };\n\n      reliableGet.get(opts, function (err, response) {\n        if (err) {\n          return next(errorTemplate({ err: err.message }));\n        }\n\n        var contentVars = {};\n        try {\n          contentVars = JSON.parse(response.content);\n        } catch (e) {\n          // Ignore parse error\n        }\n\n        _.each(contentVars, function (value, key) {\n          templateVars['content:' + tag + ':' + key] = value;\n          templateVars['content:' + tag + ':' + key + ':encoded'] = encodeURI(value);\n        });\n\n        next(null, '<!-- content ' + tag + ' loaded -->');\n      });\n    }\n\n    function getSlot(fragment, next) {\n      var slotName = getCxAttr(fragment, 'cx-define-slot');\n      var content = templateVars.slots[slotName];\n      parxer(getParxerOpts(0), content, function (parxerErr, fragmentCount, newContent) {\n        if (parxerErr && parxerErr.content) {\n          return next(parxerErr, content);\n        }\n        return next(null, newContent);\n      });\n    }\n\n    function getCookie() {\n      if (req.cookies && req.headers.cookie) {\n        var whitelist = config.cookies && config.cookies.whitelist;\n        return whitelist ? utils.filterCookies(whitelist, req.cookies) : req.headers.cookie;\n      }\n    }\n\n    function setResponseHeaders(headers) {\n      if (res.headersSent) {\n        return; // ignore late joiners\n      }\n\n      // A fragment is telling us to not cache it. We force the entire backend/composed page to not be cached.\n      var cacheControlHeader = headers['cache-control'];\n      if (cacheControlHeader && (cacheControlHeader.indexOf('no-cache') !== -1 || cacheControlHeader.indexOf('no-store') !== -1)) {\n        // Use the fragment's cache-control header only if we don't already have one from the backend, or\n        // it does not have no-cache or no-store.\n        var backendCacheControl = res.getHeader('cache-control');\n        if (!backendCacheControl || (backendCacheControl.indexOf('no-cache') === -1 && backendCacheControl.indexOf('no-store') === -1)) {\n          res.setHeader('cache-control', 'no-cache, no-store, must-revalidate');\n        }\n      }\n\n      if (headers['set-cookie']) {\n        var existingResponseCookies = res.getHeader('set-cookie') || [];\n        res.setHeader('set-cookie', _.union(existingResponseCookies, headers['set-cookie']));\n      }\n    }\n\n    function logError(err, message, ignoreError) {\n      var logLevel = (err.statusCode === 404 || ignoreError) ? 'warn' : 'error';\n\n      if (typeof eventHandler.logger === 'function') {\n        eventHandler.logger(logLevel, message, { tracer: req.tracer });\n      }\n    }\n\n    function isDebugEnabled() {\n      return req.query && req.query['cx-debug'];\n    }\n\n    function getParxerOpts(depth) {\n      function getCx(fragment, next) {\n        var start = Date.now();\n        var parseMeTag = hasCxAttr(fragment, 'cx-parse-me');\n        var url = getCxAttr(fragment, 'cx-url');\n        var cacheKeyAttr = getCxAttr(fragment, 'cx-cache-key');\n        var ignoreError = getCxAttr(fragment, 'cx-ignore-error');\n\n        function responseCallback(err, content, headers) {\n          if (headers) {\n            var newTemplateVars = utils.formatTemplateVariables(headers);\n            _.assign(templateVars, newTemplateVars);\n            setResponseHeaders(headers);\n          }\n\n          if (err || !content) {\n            return next(err, content, headers);\n          }\n\n          if (depth > (config.fragmentDepth || 5)) {\n            return next(err, content, headers);\n          }\n\n          if (!parseMeTag && (!headers || !headers['cx-parse-me'])) {\n            return next(err, content, headers);\n          }\n\n          parxer(getParxerOpts(depth + 1), content, function (parxerErr, fragmentCount, newContent) {\n            if (parxerErr && parxerErr.content) {\n              return next(parxerErr, content, headers);\n            }\n            return next(null, newContent, headers);\n          });\n        }\n\n        function onErrorHandler(err, oldCacheData, transformedOptions) {\n          var errorMsg;\n          var elapsed = Date.now() - req.timerStart;\n          var timing = Date.now() - start;\n\n          // Check to see if we are just ignoring errors completely for this fragment\n          if (ignoreError && (ignoreError === 'true' || _.includes(ignoreError.split(','), String(err.statusCode)))) {\n            errorMsg = _.template('IGNORE <%= statusCode %> for Service <%= url %> cache <%= cacheKey %>.');\n            logError(err, errorMsg({ url: transformedOptions.url, cacheKey: transformedOptions.cacheKey, statusCode: err.statusCode }), true);\n            return responseCallback(errorTemplate({ err: err.message }));\n          }\n\n          // Check to see if we have any statusCode handlers defined\n          if (err.statusCode && config.statusCodeHandlers && config.statusCodeHandlers[err.statusCode]) {\n            var handlerDefn = config.statusCodeHandlers[err.statusCode];\n            var handlerFn = config.functions && config.functions[handlerDefn.fn];\n\n            if (handlerFn) {\n              return handlerFn(req, res, req.templateVars, handlerDefn.data, transformedOptions, err, responseCallback);\n            }\n          }\n\n          if (err.statusCode === 404 && !transformedOptions.ignore404) {\n            errorMsg = _.template('404 Service <%= url %> cache <%= cacheKey %> returned 404.');\n            logError(err, errorMsg({ url: transformedOptions.url, cacheKey: transformedOptions.cacheKey }));\n\n            if (res.headersSent) {\n              return;\n            }\n\n            res.writeHead(404, { 'Content-Type': 'text/html' });\n            return res.end(errorMsg(transformedOptions));\n          }\n\n          if (oldCacheData && oldCacheData.content) {\n            responseCallback(errorTemplate({ err: err.message }), oldCacheData.content, oldCacheData.headers);\n            errorMsg = _.template('STALE <%= url %> cache <%= cacheKey %> failed but serving stale content.');\n            logError(err, errorMsg(transformedOptions));\n          } else {\n            responseCallback(errorTemplate({ err: err.message }));\n          }\n\n          if (typeof eventHandler.stats === 'function') {\n            eventHandler.stats('increment', transformedOptions.statsdKey + '.error');\n          }\n\n          errorMsg = _.template('FAIL <%= url %> did not respond in <%= timing%>, elapsed <%= elapsed %>. Reason: ' + err.message);\n          logError(err, errorMsg({ url: transformedOptions.url, timing: timing, elapsed: elapsed }));\n        }\n\n        var options = {\n          url: url,\n          timeout: utils.timeToMillis(getCxAttr(fragment, 'cx-timeout', '5s')),\n          cacheKey: cacheKeyAttr || utils.urlToCacheKey(url),\n          cacheTTL: utils.timeToMillis(getCxAttr(fragment, 'cx-cache-ttl', '1m')),\n          explicitNoCache: req.explicitNoCache || getNoCacheAttr(fragment),\n          ignore404: getCxAttr(fragment, 'cx-ignore-404', 'true') === 'true',\n          type: 'fragment',\n          tracer: req.tracer,\n          statsdKey: 'fragment_' + getCxAttr(fragment, 'cx-statsd-key', 'unknown'),\n          headers: {\n            accept: getCxAttr(fragment, 'cx-accept', 'text/html'),\n            cookie: getCookie(),\n            'cx-page-url': templateVars['url:href'],\n            'x-tracer': req.tracer,\n            'x-cdn-host': getCdnHost(),\n            'x-cdn-url': getCdnUrl()\n          }\n        };\n\n        function transformerCallback(err, transformedOptions) {\n          if (err) {\n            return onErrorHandler(err, {}, transformedOptions);\n          }\n\n          reliableGet.get(transformedOptions, function getCallback(getErr, response) {\n            if (getErr) {\n              return onErrorHandler(getErr, response, transformedOptions);\n            }\n\n            fragmentTimings.push({ url: url, status: response.statusCode, timing: response.timing });\n\n            var content = isDebugEnabled() ? delimitContent(response, options) : response.content;\n            responseCallback(null, content, response.headers);\n          });\n        }\n\n        optionsTransformer(req, options, transformerCallback);\n      }\n\n      var baseURL = config.getBaseURL ? config.getBaseURL(req) : url.format({ protocol: req.protocol, host: req.get('host') });\n\n      return {\n        environment: config.environment,\n        baseURL: config.useRelativeURL ? baseURL : undefined,\n        cdn: config.cdn,\n        minified: config.minified,\n        showErrors: !req.backend.quietFailure,\n        timeout: utils.timeToMillis(req.backend.timeout || '5000'),\n        parserTimeout: utils.timeToMillis(req.backend.parserTimeout || '5000'),\n        plugins: [\n          parxerPlugins.Test,\n          parxerPlugins.If,\n          parxerPlugins.Url(getCx),\n          parxerPlugins.Image(),\n          parxerPlugins.Bundle(getCx),\n          parxerPlugins.Content(getContent),\n          parxerPlugins.ContentItem,\n          parxerPlugins.DefineSlot(getSlot),\n          parxerPlugins.Library(getCx)\n        ],\n        variables: templateVars,\n        commonState: commonState\n      };\n    }\n\n    function parseCallback(err, fragmentIndex, content) {\n      if (err) {\n        // Overall errors\n        if (!res.headersSent && err.content) {\n          res.writeHead(err.statusCode || 500, { 'Content-Type': 'text/html' });\n          return res.end(err.content);\n        }\n\n        if (err.fragmentErrors) {\n          // TODO: Notify fragment errors to debugger in future\n        }\n\n        if (err.statistics && config.functions && config.functions.statisticsHandler) {\n          // Send stats to the stats handler if it is defined\n          config.functions.statisticsHandler(req.backend, err.statistics);\n        }\n      }\n\n      if (!res.headersSent) {\n        res.writeHead(200, _.assign({ 'Content-Type': 'text/html' }, commonState.additionalHeaders || {}));\n\n        if (req.query && req.query['cx-debug']) {\n          return res.end(content.replace('</body>', debugScript + '</body>'));\n        }\n\n        return res.end(content);\n      }\n    }\n\n    res.parse = function parse(data) {\n      parxer(getParxerOpts(1), data, parseCallback);\n    };\n\n    cb();\n  };\n}\n\n\nmodule.exports = {\n  getMiddleware: getMiddleware\n};\n","/home/travis/build/npmtest/node-npmtest-compoxure/node_modules/compoxure/src/middleware/interrorgator.js":"var RequestInterrogator = require('../parameters/RequestInterrogator');\n\nmodule.exports = function (config, eventHandler) {\n\n  var interrogator = new RequestInterrogator(config.parameters,\n    config.cdn || {},\n    config.environment,\n    eventHandler);\n\n  return function (req, res, next) {\n    interrogator.interrogateRequest(req, function (templateVars) {\n      req.templateVars = templateVars;\n      next();\n    });\n  }\n\n}\n\n","/home/travis/build/npmtest/node-npmtest-compoxure/node_modules/compoxure/src/parameters/RequestInterrogator.js":"'use strict';\n\nvar _ = require('lodash');\nvar url = require('url');\nvar Parser = require('express-device').Parser;\nvar utils = require('../utils');\n\nmodule.exports = function (config, cdn, environment) {\n\n  config = config || {\n      urls: [\n        { pattern: '.*', names: [] }\n      ], servers: {}\n    };\n\n  environment = { name: environment || process.env.NODE_ENV || 'development' };\n\n\n  function flatten(variables, type, key, value) {\n    variables[type + ':' + key] = value;\n    variables[type + ':' + key + ':encoded'] = encodeURIComponent(value);\n  }\n\n  function interrogatePath(path) {\n\n    var matches = _.map(config.urls, function (url) {\n      var regexp = new RegExp(url.pattern);\n      var match = regexp.exec(path);\n      if (!match) { return {}; }\n      return _.object(url.names, _.rest(match, 1));\n    });\n\n    var parameters = {};\n    _.each(matches, function (match) {\n      _.each(match, function (value, key) {\n        parameters[key] = value;\n      });\n    });\n\n    return parameters;\n  }\n\n  function interrogateParams(params) {\n\n    var parameters = {};\n    _.forEach(config.query, function (query) {\n      if (params[query.key]) {\n        parameters[query.mapTo] = params[query.key];\n      }\n    });\n    return parameters;\n  }\n\n  function getPort(req) {\n    var host = req.headers.http_host || req.headers.host;\n    var res = host ? host.match(/:(\\d+)/) : '';\n    return res ? res[1] : req.connection.pair ? '443' : '80';\n  }\n\n  function getPageUrl(req, parsedUrl) {\n\n    var components = {\n      host: req.headers.http_host || req.headers.host,\n      port: getPort(req),\n      protocol: req.isSpdy ? 'https' : (req.connection.pair ? 'https' : 'http'),\n      search: parsedUrl.search,\n      pathname: parsedUrl.pathname\n    };\n\n    return url.parse(url.format(components), false);\n\n  }\n\n  this.interrogateRequest = function (req, next) {\n\n    var parsedUrl = url.parse(req.url, true);\n    var templateParams = interrogatePath(parsedUrl.path);\n    var queryParams = interrogateParams(parsedUrl.query);\n    var pageUrl = getPageUrl(req, parsedUrl);\n    var user = req.user || { userId: '_' };\n    user.loggedIn = Boolean(req.user);\n    var deviceType = new Parser(req).get_type();\n    if (deviceType === 'bot') { deviceType = 'desktop'; } // Serve desktop versions to bots ?\n\n    var requestVariables = {};\n\n    var requestConfig = {\n      param: _.extend(queryParams, templateParams),\n      url: pageUrl,\n      query: parsedUrl.query,\n      cookie: req.cookies,\n      header: req.headers,\n      server: config.servers,\n      env: environment,\n      user: user,\n      experiments: req.experiments || {},\n      device: { type: deviceType }\n    };\n\n    _.forOwn(requestConfig, function (values, type) {\n      _.forOwn(values, function (value, key) {\n        flatten(requestVariables, type, key, value);\n      });\n    });\n\n    if (cdn && cdn.url) {\n      flatten(requestVariables, 'cdn', 'url', utils.render(cdn.url, requestVariables));\n    }\n\n    next(requestVariables);\n  };\n\n};\n","/home/travis/build/npmtest/node-npmtest-compoxure/node_modules/compoxure/src/middleware/invalidurl.js":"module.exports = function (eventHandler) {\n  return function (req, res, next) {\n    try {\n      decodeURI(req.url);\n    } catch (ex) {\n      eventHandler.logger('warn', 'Filtered out invalid URL - removed all query params.', { invalidUrl: req.url });\n      req.url = req.url.split('?')[0]; // Just take the good parts for now - wtf\n    }\n    next();\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-compoxure/node_modules/compoxure/src/middleware/mediatypes.js":"var Accepts = require('accepts');\nvar HttpStatus = require('http-status-codes');\n\nmodule.exports = function rejectUnsupportedMediaType(req, res, next) {\n  var accept = new Accepts(req);\n  var backendTypes = req.backend.contentTypes || ['html'];\n\n  var contentType = accept.types(backendTypes);\n  if (contentType === false) {\n    if (!res.headersSent) {\n      res.writeHead(HttpStatus.UNSUPPORTED_MEDIA_TYPE);\n    }\n\n    var message = 'Unsupported content type: [' + req.headers.accept + '], url was ' + req.url;\n    next({\n      message: message,\n      url: req.url,\n      supportedTypes: backendTypes,\n      requestedTypes: req.headers.accept\n    });\n    return;\n  }\n\n  req.contentType = contentType;\n  next();\n}\n","/home/travis/build/npmtest/node-npmtest-compoxure/node_modules/compoxure/src/middleware/passthrough.js":"var request = require('request');\nvar url = require('url');\nvar utils = require('../utils');\n\nmodule.exports = function (config) {\n  return function (req, res, next) {\n\n    var isPassThrough = function (req) {\n      if (!req.backend.passThrough) { return false }\n      if (config.enableExtension && req.method === 'POST' && req.is('text/compoxure')) { return false; }\n      if (req.method !== 'GET') { return true; }\n      if (req.contentType === 'text/html') { return false; }\n      if (req.contentType === 'html') { return false; }\n      if (req.contentType === '*/*') { return false; }\n      return true;\n    }\n\n    if (isPassThrough(req)) {\n\n      var targetUrl = url.parse(req.backend.target);\n      var reqUrl = url.parse(req.url);\n\n      // Create forward url\n      var forwardUrl = url.format({\n        pathname: reqUrl.pathname,\n        search: reqUrl.search,\n        host: targetUrl.host,\n        protocol: targetUrl.protocol,\n      });\n\n      var requestConfig = {\n        url: forwardUrl,\n        timeout: utils.timeToMillis(req.backend.timeout || '30s')\n      };\n\n      req.pipe(request(requestConfig)).pipe(res);\n\n    } else {\n\n      next();\n\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-compoxure/node_modules/compoxure/src/middleware/proxy.js":"var _ = require('lodash');\nvar utils = require('../utils');\nvar HtmlParserProxy = require('./htmlparser');\nvar HttpStatus = require('http-status-codes');\nvar ReliableGet = require('reliable-get');\nvar url = require('url');\nvar extractSlots = require('../extract-slots');\nvar Core = require('parxer/lib/core');\n\nmodule.exports = function backendProxyMiddleware(config, eventHandler, optionsTransformer) {\n\n  var reliableGet = new ReliableGet(config),\n    htmlParserMiddleware = HtmlParserProxy.getMiddleware(config, reliableGet, eventHandler, optionsTransformer);\n\n  reliableGet.on('log', eventHandler.logger);\n  reliableGet.on('stat', eventHandler.stats);\n\n  return function (req, res) {\n\n    htmlParserMiddleware(req, res, function () {\n\n      req.tracer = req.headers['x-tracer'] || 'no-tracer';\n\n      var DEFAULT_LOW_TIMEOUT = 5000,\n        referer = req.headers.referer || 'direct',\n        userAgent = req.headers['user-agent'] || 'unknown',\n        remoteAddress = req.connection.remoteAddress || req.socket.remoteAddress || req.connection.socket.remoteAddress,\n        remoteIp = req.headers['x-forwarded-for'] || remoteAddress,\n        backend = req.backend,\n        targetUrl = backend.target + (backend.dontPassUrl ? '' : req.url),\n        targetHost = url.parse(backend.target).hostname,\n        host = backend.host || targetHost,\n        accept = backend.accept || 'text/html',\n        device = req.templateVars['device:type'],\n        backendHeaders = {\n          'x-forwarded-host': req.headers.host || 'no-forwarded-host',\n          'x-forwarded-for': req.headers['x-forwarded-for'] || remoteAddress,\n          host: host,\n          accept: accept,\n          'x-tracer': req.tracer,\n          'user-agent': userAgent,\n          'x-device': device,\n          'x-geoip-country-code': req.headers['x-geoip-country-code'],\n          'x-csrf-token': req.headers['x-csrf-token']\n        },\n        targetCacheKey = backend.cacheKey,\n        targetCacheTTL = utils.timeToMillis(backend.ttl || '30s'),\n        explicitNoCache = backend.noCache || req.explicitNoCache,\n        options;\n\n      if (config.cdn && config.cdn.url) { backendHeaders['x-cdn-url'] = config.cdn.url; }\n\n      if (req.cookies && req.headers.cookie) {\n        var whitelist = config.cookies && config.cookies.whitelist;\n        backendHeaders.cookie = whitelist ? utils.filterCookies(whitelist, req.cookies) : req.headers.cookie;\n      }\n\n      if (req.headers['accept-language']) {\n        backendHeaders['accept-language'] = req.headers['accept-language'];\n      }\n\n      if (backend.headers) {\n        backend.headers.forEach(function (header) {\n          backendHeaders[header] = req.headers[header] || '';\n        });\n      }\n\n      eventHandler.logger('debug', 'GET ' + req.url, {\n        tracer: req.tracer,\n        referer: referer,\n        remoteIp: remoteIp,\n        userAgent: userAgent\n      });\n\n      options = {\n        url: targetUrl,\n        cacheKey: targetCacheKey,\n        cacheTTL: targetCacheTTL,\n        explicitNoCache: explicitNoCache,\n        timeout: utils.timeToMillis(backend.timeout || DEFAULT_LOW_TIMEOUT),\n        headers: backendHeaders,\n        tracer: req.tracer,\n        type: 'backend',\n        statsdKey: 'backend_' + utils.urlToCacheKey(host),\n        eventHandler: eventHandler\n      };\n\n      var logError = function (err, message) {\n        var logLevel = err.statusCode === 404 ? 'warn' : 'error';\n        eventHandler.logger(logLevel, message, {\n          tracer: req.tracer\n        });\n      }\n\n      var handleError = function (err) {\n        if (!res.headersSent) {\n          res.writeHead(err.statusCode || HttpStatus.INTERNAL_SERVER_ERROR);\n          res.end(err.message);\n        }\n        logError(err, 'Backend FAILED but to respond: ' + err.message);\n      };\n\n      var handleErrorDecorator = function (func) {\n        return function (err, response) {\n          if (!err) {\n            return func(null, response); // no errors!\n          }\n\n          // Check to see if we have any statusCode handlers defined\n          if (err.statusCode && config.statusCodeHandlers && config.statusCodeHandlers[err.statusCode]) {\n            var handlerDefn = config.statusCodeHandlers[err.statusCode];\n            var handlerFn = config.functions && config.functions[handlerDefn.fn];\n            if (handlerFn) {\n              return handlerFn(req, res, req.templateVars, handlerDefn.data, options, err, res.parse);\n            }\n          }\n\n          if (req.backend.quietFailure && response) {\n            logError(err, 'Backend FAILED but serving STALE content from key ' + targetCacheKey + ' : ' + err.message);\n            func(null, response);\n          } else {\n            handleError(err);\n          }\n        };\n      };\n\n      var setAdditionalHeaders = function () {\n        var headersToAdd = _.keys(backend.addResponseHeaders);\n        headersToAdd.forEach(function (header) {\n          var headerValue = backend.addResponseHeaders[header];\n          if (headerValue) { res.setHeader(header, headerValue); }\n        });\n      }\n\n      var passThroughHeaders = function (backendHeaders) {\n        var headersToAllow = backend.passThroughHeaders || [];\n        headersToAllow.forEach(function (header) {\n          var headerValue = backendHeaders[header];\n          if (headerValue) { res.setHeader(header, headerValue); }\n        });\n      }\n\n      optionsTransformer(req, options, function (err, transformedOptions) {\n        if (err) { return handleError(err); }\n\n        if (config.enableExtension && req.method === 'POST' && req.is('text/compoxure')) {\n          res.parse(req.body);\n          return;\n        }\n\n        reliableGet.get(transformedOptions, handleErrorDecorator(function (err, response) {\n          var layoutUrl;\n          var newTemplateVars = utils.formatTemplateVariables(response.headers);\n          req.templateVars = _.assign(req.templateVars, newTemplateVars);\n          if (response.headers['set-cookie']) {\n            res.setHeader('set-cookie', response.headers['set-cookie']);\n          }\n          setAdditionalHeaders();\n          passThroughHeaders(response.headers);\n          if ('cx-layout' in response.headers) {\n            layoutUrl = Core.render(response.headers['cx-layout'], req.templateVars);\n            req.templateVars.layout = layoutUrl;\n            // extract slots from original html\n            extractSlots(response.content, function (err, slots) {\n              req.templateVars.slots =  slots;\n\n              var layoutConfig = utils.getBackendConfig(config, layoutUrl);\n              var cacheKey = layoutConfig && layoutConfig.cacheKey ?\n                Core.render(layoutConfig.cacheKey, req.templateVars) :\n                'layout:'+ layoutUrl;\n\n              var cacheTTL = layoutConfig && layoutConfig.cacheTTL ?\n                layoutConfig.cacheTTL :\n                60000 * 5; // 5 mins\n\n              // get the layout\n              reliableGet.get({\n                url: layoutUrl,\n                cacheKey: cacheKey,\n                cacheTTL: cacheTTL,\n                headers: {\n                  'x-device': transformedOptions.headers['x-device'],\n                  cookie: transformedOptions.headers.cookie\n                }\n              }, handleErrorDecorator(function (err, response) {\n                res.parse(response.content);\n              }));\n            });\n          } else {\n            res.parse(response.content);\n          }\n        }));\n      });\n\n    });\n\n  }\n}\n"}